{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hriti\\\\OneDrive\\\\Desktop\\\\Zoom Clone\\\\frontend\\\\src\\\\pages\\\\VideoMeet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport \"../Styles/VideoComponents.css\";\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = \"http://localhost:8000\";\nvar connections = {};\nconst peerConfigConnection = {\n  \"iceServers\": [{\n    \"url\": \"stun:stun.l.google.com:19302\"\n  }]\n};\nfunction VideoMeet() {\n  _s();\n  var socketRef = useRef();\n  let socketIdRef = useRef(); //jab video connect hoga to apna socket id\n\n  let localVideoref = useRef();\n  let [videoAvailable, setVideoAvailable] = useState(true); // permission lena video available he ya nahi\n\n  let [audioAvailable, setAudioAvailable] = useState(true);\n  let [video, setVideo] = useState([]); // jab ham video on / off \n\n  let [audio, setAudio] = useState(); // audio set up for on / off\n\n  let [screen, setScreen] = useState(); // \n\n  let [showModal, setModal] = useState(true); // neeche se pop up niklenga\n\n  let [screenAvailable, setScreenAvailable] = useState(); //screen share available he ki nahi\n\n  let [messages, setMessages] = useState([]); // mesaage ke state handle \n\n  let [message, setMessage] = useState(\"\");\n  let [newMessages, setNewMessages] = useState(0);\n  let [askForUsername, setAskForUsername] = useState(true);\n  let [username, setUsername] = useState(\"\");\n  const videoRef = useRef([]);\n  let [videos, setVideos] = useState([]);\n  const getPermissions = async () => {\n    try {\n      // This prompts the user for permission to access their webcam.\n      const videopermission = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      if (videopermission) {\n        setVideoAvailable(true);\n      } else {\n        setVideoAvailable(false);\n      }\n      // this is for audio \n      const audiopermission = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      if (audiopermission) {\n        setAudioAvailable(true);\n      } else {\n        setAudioAvailable(false);\n      }\n\n      // screen sharing\n      if (navigator.mediaDevices.getDisplayMedia) {\n        setScreenAvailable(true);\n      } else {\n        setScreenAvailable(false);\n      }\n\n      // this code give you video of your on page\n      if (videoAvailable || audioAvailable) {\n        const userMediaStream = await navigator.mediaDevices.getUserMedia({\n          video: videoAvailable,\n          audio: audioAvailable\n        });\n        if (userMediaStream) {\n          window.localStream = userMediaStream;\n          if (localVideoref.current) {\n            localVideoref.current.srcObject = userMediaStream;\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    getPermissions();\n  }, []);\n  let getUserMediaSuccess = stream => {};\n  let getUserMedia = () => {\n    if (video && videoAvailable || audio && audioAvailable) {\n      navigator.mediaDevices.getUserMedia({\n        video: video,\n        audio: audio\n      }).then(getUserMediaSuccess).then().catch(err => {\n        console.log(err);\n      });\n    } else {\n      try {\n        let tracks = localVideoref.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n  useEffect(() => {\n    if (video !== undefined && audio !== undefined) {\n      getUserMedia();\n      console.log(\"SET STATE HAS \", video, audio);\n    }\n  }, [video, audio]);\n  let gotMessageFromServer = (fromId, message) => {};\n  let addMessage = () => {};\n  // webRTC connect to \n  let connectToSocketServer = () => {\n    socketRef.current = io.connect(server_url, {\n      secure: false\n    });\n    socketRef.current.on('signal', gotMessageFromServer);\n    socketRef.current.on('connect', () => {\n      socketRef.current.emit('join-call', window.location.href);\n      socketIdRef.current = socketRef.current.id;\n      socketRef.current.on('chat-message', addMessage);\n      socketRef.current.on('user-left', id => {\n        setVideos(videos => videos.filter(video => video.socketId !== id));\n      });\n      socketRef.current.on('user-joined', (id, clients) => {\n        clients.forEach(socketListId => {\n          connections[socketListId] = new RTCPeerConnection(peerConfigConnections);\n          // Wait for their ice candidate       \n          connections[socketListId].onicecandidate = function (event) {\n            if (event.candidate != null) {\n              socketRef.current.emit('signal', socketListId, JSON.stringify({\n                'ice': event.candidate\n              }));\n            }\n          };\n\n          // Wait for their video stream\n          connections[socketListId].onaddstream = event => {\n            console.log(\"BEFORE:\", videoRef.current);\n            console.log(\"FINDING ID: \", socketListId);\n            let videoExists = videoRef.current.find(video => video.socketId === socketListId);\n            if (videoExists) {\n              console.log(\"FOUND EXISTING\");\n\n              // Update the stream of the existing video\n              setVideos(videos => {\n                const updatedVideos = videos.map(video => video.socketId === socketListId ? {\n                  ...video,\n                  stream: event.stream\n                } : video);\n                videoRef.current = updatedVideos;\n                return updatedVideos;\n              });\n            } else {\n              // Create a new video\n              console.log(\"CREATING NEW\");\n              let newVideo = {\n                socketId: socketListId,\n                stream: event.stream,\n                autoplay: true,\n                playsinline: true\n              };\n              setVideos(videos => {\n                const updatedVideos = [...videos, newVideo];\n                videoRef.current = updatedVideos;\n                return updatedVideos;\n              });\n            }\n          };\n\n          // Add the local video stream\n          if (window.localStream !== undefined && window.localStream !== null) {\n            connections[socketListId].addStream(window.localStream);\n          } else {\n            let blackSilence = (...args) => new MediaStream([black(...args), silence()]);\n            window.localStream = blackSilence();\n            connections[socketListId].addStream(window.localStream);\n          }\n        });\n        if (id === socketIdRef.current) {\n          for (let id2 in connections) {\n            if (id2 === socketIdRef.current) continue;\n            try {\n              connections[id2].addStream(window.localStream);\n            } catch (e) {}\n            connections[id2].createOffer().then(description => {\n              connections[id2].setLocalDescription(description).then(() => {\n                socketRef.current.emit('signal', id2, JSON.stringify({\n                  'sdp': connections[id2].localDescription\n                }));\n              }).catch(e => console.log(e));\n            });\n          }\n        }\n      });\n    });\n  };\n  let getMedia = () => {\n    setVideo(videoAvailable);\n    setAudio(audioAvailable);\n    connectToSocketServer();\n  };\n  let connect = () => {\n    setAskForUsername(false);\n    getMedia();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children:\n    // video and audio control user write usename and connect to meeting\n    // after we enter a username and then join code\n    // this page is decide for this direct connect\n    askForUsername === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter into Lobby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: connect,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          src: \"\",\n          ref: localVideoref,\n          autoPlay: true,\n          muted: true,\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoMeet, \"k501hHsYRdD4xIst+gu4+PUW6zo=\");\n_c = VideoMeet;\nexport default VideoMeet;\nvar _c;\n$RefreshReg$(_c, \"VideoMeet\");","map":{"version":3,"names":["React","useEffect","useRef","useState","TextField","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","connections","peerConfigConnection","VideoMeet","_s","socketRef","socketIdRef","localVideoref","videoAvailable","setVideoAvailable","audioAvailable","setAudioAvailable","video","setVideo","audio","setAudio","screen","setScreen","showModal","setModal","screenAvailable","setScreenAvailable","messages","setMessages","message","setMessage","newMessages","setNewMessages","askForUsername","setAskForUsername","username","setUsername","videoRef","videos","setVideos","getPermissions","videopermission","navigator","mediaDevices","getUserMedia","audiopermission","getDisplayMedia","userMediaStream","window","localStream","current","srcObject","err","console","log","getUserMediaSuccess","stream","then","catch","tracks","getTracks","forEach","track","stop","undefined","gotMessageFromServer","fromId","addMessage","connectToSocketServer","io","connect","secure","on","emit","location","href","id","filter","socketId","clients","socketListId","RTCPeerConnection","peerConfigConnections","onicecandidate","event","candidate","JSON","stringify","onaddstream","videoExists","find","updatedVideos","map","newVideo","autoplay","playsinline","addStream","blackSilence","args","MediaStream","black","silence","id2","e","createOffer","description","setLocalDescription","localDescription","getMedia","children","fileName","_jsxFileName","lineNumber","columnNumber","label","value","onChange","target","variant","onClick","src","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["C:/Users/hriti/OneDrive/Desktop/Zoom Clone/frontend/src/pages/VideoMeet.jsx"],"sourcesContent":["import React,{useEffect, useRef,useState} from 'react'\r\nimport \"../Styles/VideoComponents.css\"\r\nimport TextField from '@mui/material/TextField'\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\n\r\nconst server_url=\"http://localhost:8000\"\r\n\r\nvar connections={}\r\nconst peerConfigConnection={\r\n    \"iceServers\":[\r\n        {\"url\":\"stun:stun.l.google.com:19302\"}\r\n    ]\r\n}\r\n\r\nfunction VideoMeet() {\r\n    var socketRef = useRef();\r\n    let socketIdRef = useRef(); //jab video connect hoga to apna socket id\r\n\r\n    let localVideoref = useRef();\r\n\r\n    let [videoAvailable, setVideoAvailable] = useState(true); // permission lena video available he ya nahi\r\n\r\n    let [audioAvailable, setAudioAvailable] = useState(true); \r\n\r\n    let [video, setVideo] = useState([]); // jab ham video on / off \r\n\r\n    let [audio, setAudio] = useState();  // audio set up for on / off\r\n\r\n    let [screen, setScreen] = useState(); // \r\n\r\n    \r\n    let [showModal, setModal] = useState(true); // neeche se pop up niklenga\r\n\r\n    let [screenAvailable, setScreenAvailable] = useState(); //screen share available he ki nahi\r\n\r\n    let [messages, setMessages] = useState([])  // mesaage ke state handle \r\n\r\n    let [message, setMessage] = useState(\"\"); \r\n\r\n    let [newMessages, setNewMessages] = useState(0); \r\n\r\n    let [askForUsername, setAskForUsername] = useState(true); \r\n\r\n    let [username, setUsername] = useState(\"\");\r\n\r\n    const videoRef = useRef([])\r\n\r\n    let [videos, setVideos] = useState([])\r\n\r\n    const getPermissions=async ()=>{\r\n        try{\r\n        // This prompts the user for permission to access their webcam.\r\n        const videopermission=await navigator.mediaDevices.getUserMedia({video:true});\r\n\r\n        if(videopermission){\r\n            setVideoAvailable(true);\r\n        }\r\n        else{\r\n            setVideoAvailable(false);\r\n        }\r\n        // this is for audio \r\n         const audiopermission=await navigator.mediaDevices.getUserMedia({audio:true});\r\n\r\n        if(audiopermission){\r\n            setAudioAvailable(true);\r\n        }\r\n        else{\r\n            setAudioAvailable(false);\r\n        }\r\n        \r\n        // screen sharing\r\n        if(navigator.mediaDevices.getDisplayMedia){\r\n            setScreenAvailable(true)\r\n        }else{\r\n            setScreenAvailable(false)\r\n        }\r\n        \r\n        // this code give you video of your on page\r\n        if(videoAvailable || audioAvailable){\r\n            const userMediaStream=await navigator.mediaDevices.getUserMedia({video:videoAvailable,audio:audioAvailable})\r\n            if(userMediaStream){\r\n                window.localStream=userMediaStream;\r\n                if(localVideoref.current){\r\n                    localVideoref.current.srcObject=userMediaStream;\r\n                }\r\n            }\r\n        }\r\n        }\r\n        catch(err){\r\n         console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getPermissions();\r\n    },[])\r\n\r\n    let getUserMediaSuccess=(stream)=>{\r\n        \r\n    }\r\n\r\n    let getUserMedia=()=>{\r\n        if((video  && videoAvailable) || (audio && audioAvailable )){\r\n            navigator.mediaDevices.getUserMedia({video:video,audio:audio})\r\n            .then(getUserMediaSuccess)\r\n            .then()\r\n            .catch((err)=>{\r\n                console.log(err);\r\n            })\r\n            \r\n        }\r\n        else{\r\n            try{\r\n              let tracks=localVideoref.current.srcObject.getTracks();\r\n              tracks.forEach(track=>track.stop()) \r\n            }\r\n            catch(err){\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n   \r\n      useEffect(() => {\r\n        if (video !== undefined && audio !== undefined) {\r\n            getUserMedia();\r\n            console.log(\"SET STATE HAS \", video, audio);\r\n\r\n        }\r\n\r\n\r\n    }, [video, audio])\r\n\r\n    let gotMessageFromServer=(fromId,message)=>{\r\n\r\n    } \r\n    let addMessage=()=>{\r\n\r\n    }\r\n    // webRTC connect to \r\n    let connectToSocketServer = () => {\r\n        socketRef.current = io.connect(server_url, { secure: false })\r\n\r\n        socketRef.current.on('signal', gotMessageFromServer);\r\n\r\n        socketRef.current.on('connect', () => {\r\n            socketRef.current.emit('join-call', window.location.href)\r\n            socketIdRef.current = socketRef.current.id\r\n\r\n            socketRef.current.on('chat-message', addMessage)\r\n\r\n            socketRef.current.on('user-left', (id) => {\r\n                setVideos((videos) => videos.filter((video) => video.socketId !== id))\r\n            })\r\n\r\n            socketRef.current.on('user-joined', (id, clients) => {\r\n                clients.forEach((socketListId) => {\r\n\r\n                    connections[socketListId] = new RTCPeerConnection(peerConfigConnections)\r\n                    // Wait for their ice candidate       \r\n                    connections[socketListId].onicecandidate = function (event) {\r\n                        if (event.candidate != null) {\r\n                            socketRef.current.emit('signal', socketListId, JSON.stringify({ 'ice': event.candidate }))\r\n                        }\r\n                    }\r\n\r\n                    // Wait for their video stream\r\n                    connections[socketListId].onaddstream = (event) => {\r\n                        console.log(\"BEFORE:\", videoRef.current);\r\n                        console.log(\"FINDING ID: \", socketListId);\r\n\r\n                        let videoExists = videoRef.current.find(video => video.socketId === socketListId);\r\n\r\n                        if (videoExists) {\r\n                            console.log(\"FOUND EXISTING\");\r\n\r\n                            // Update the stream of the existing video\r\n                            setVideos(videos => {\r\n                                const updatedVideos = videos.map(video =>\r\n                                    video.socketId === socketListId ? { ...video, stream: event.stream } : video\r\n                                );\r\n                                videoRef.current = updatedVideos;\r\n                                return updatedVideos;\r\n                            });\r\n                        } else {\r\n                            // Create a new video\r\n                            console.log(\"CREATING NEW\");\r\n                            let newVideo = {\r\n                                socketId: socketListId,\r\n                                stream: event.stream,\r\n                                autoplay: true,\r\n                                playsinline: true\r\n                            };\r\n\r\n                            setVideos(videos => {\r\n                                const updatedVideos = [...videos, newVideo];\r\n                                videoRef.current = updatedVideos;\r\n                                return updatedVideos;\r\n                            });\r\n                        }\r\n                    };\r\n\r\n\r\n                    // Add the local video stream\r\n                    if (window.localStream !== undefined && window.localStream !== null) {\r\n                        connections[socketListId].addStream(window.localStream)\r\n                    } else {\r\n                        let blackSilence = (...args) => new MediaStream([black(...args), silence()])\r\n                        window.localStream = blackSilence()\r\n                        connections[socketListId].addStream(window.localStream)\r\n                    }\r\n                })\r\n\r\n                if (id === socketIdRef.current) {\r\n                    for (let id2 in connections) {\r\n                        if (id2 === socketIdRef.current) continue\r\n\r\n                        try {\r\n                            connections[id2].addStream(window.localStream)\r\n                        } catch (e) { }\r\n\r\n                        connections[id2].createOffer().then((description) => {\r\n                            connections[id2].setLocalDescription(description)\r\n                                .then(() => {\r\n                                    socketRef.current.emit('signal', id2, JSON.stringify({ 'sdp': connections[id2].localDescription }))\r\n                                })\r\n                                .catch(e => console.log(e))\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n     let getMedia = () => {\r\n        setVideo(videoAvailable);\r\n        setAudio(audioAvailable);\r\n        connectToSocketServer();\r\n    }\r\n    let connect=()=>{\r\n        setAskForUsername(false);\r\n        getMedia();\r\n    }\r\n  return (\r\n    <div>\r\n      {\r\n        // video and audio control user write usename and connect to meeting\r\n        // after we enter a username and then join code\r\n        // this page is decide for this direct connect\r\n        askForUsername===true ?\r\n        <div>\r\n            \r\n            <h2>Enter into Lobby</h2>\r\n            <TextField id=\"outlined-basic\" label=\"username\" value={username} onChange={e=>setUsername(e.target.value)}></TextField>\r\n            <Button variant=\"contained\" onClick={connect}>Connect</Button>\r\n\r\n            {/* // video code is here bro */}\r\n            <div>\r\n            <video src=\"\" ref={localVideoref} autoPlay muted> </video>\r\n            </div>\r\n\r\n\r\n\r\n        </div> : <></>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoMeet\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}