{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hriti\\\\OneDrive\\\\Desktop\\\\Zoom Clone\\\\frontend\\\\src\\\\pages\\\\VideoMeet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport styles from \"../Styles/VideoComponents.module.css\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport io from \"socket.io-client\";\nimport IconButton from \"@mui/material/IconButton\";\nimport VideocamIcon from \"@mui/icons-material/Videocam\";\nimport VideocamOffIcon from \"@mui/icons-material/VideocamOff\";\nimport CallEndIcon from \"@mui/icons-material/CallEnd\";\nimport MicIcon from \"@mui/icons-material/Mic\";\nimport MicOffIcon from \"@mui/icons-material/MicOff\";\nimport ScreenShareIcon from \"@mui/icons-material/ScreenShare\";\nimport StopscrennshareIcon from \"@mui/icons-material/StopScreenShare\";\nimport Badge from \"@mui/material/Badge\";\nimport ChatIcon from \"@mui/icons-material/Chat\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = \"http://localhost:8000\";\nvar connections = {};\nconst peerConfigConnections = {\n  iceServers: [{\n    url: \"stun:stun.l.google.com:19302\"\n  }]\n};\nfunction VideoMeet() {\n  _s();\n  var socketRef = useRef();\n  let socketIdRef = useRef(); //jab video connect hoga to apna socket id\n\n  let localVideoref = useRef();\n  let [videoAvailable, setVideoAvailable] = useState(true); // permission lena video available he ya nahi\n\n  let [audioAvailable, setAudioAvailable] = useState(true);\n  let [video, setVideo] = useState([]); // jab ham video on / off\n\n  let [audio, setAudio] = useState(); // audio set up for on / off\n\n  let [screen, setScreen] = useState(); //\n\n  let [showModal, setModal] = useState(true); // neeche se pop up niklenga\n\n  let [screenAvailable, setScreenAvailable] = useState(); //screen share available he ki nahi\n\n  let [messages, setMessages] = useState([]); // mesaage ke state handle\n\n  let [message, setMessage] = useState(\"\");\n  let [newMessages, setNewMessages] = useState(3); // chat ke uppar\n\n  let [askForUsername, setAskForUsername] = useState(true);\n  let [username, setUsername] = useState(\"\");\n  const videoRef = useRef([]);\n  let [videos, setVideos] = useState([]);\n  const getPermissions = async () => {\n    try {\n      // This prompts the user for permission to access their webcam.\n      const videopermission = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      if (videopermission) {\n        setVideoAvailable(true);\n      } else {\n        setVideoAvailable(false);\n      }\n      // this is for audio\n      const audiopermission = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      if (audiopermission) {\n        setAudioAvailable(true);\n      } else {\n        setAudioAvailable(false);\n      }\n\n      // screen sharing\n      if (navigator.mediaDevices.getDisplayMedia) {\n        setScreenAvailable(true);\n      } else {\n        setScreenAvailable(false);\n      }\n\n      // this code give you video of your on page\n      if (videoAvailable || audioAvailable) {\n        const userMediaStream = await navigator.mediaDevices.getUserMedia({\n          video: videoAvailable,\n          audio: audioAvailable\n        });\n        if (userMediaStream) {\n          window.localStream = userMediaStream;\n          if (localVideoref.current) {\n            localVideoref.current.srcObject = userMediaStream;\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    getPermissions();\n  }, []);\n\n  // connection with web RTC\n  let getUserMediaSuccess = stream => {\n    console.log(\"HERE\");\n    try {\n      window.localStream.getTracks().forEach(track => track.stop());\n    } catch (e) {\n      console.log(e);\n    }\n    window.localStream = stream;\n    localVideoref.current.srcObject = stream;\n    for (let id in connections) {\n      if (id === socketIdRef.current) continue;\n      connections[id].addStream(window.localStream);\n      connections[id].createOffer().then(description => {\n        connections[id].setLocalDescription(description).then(() => {\n          socketRef.current.emit(\"signal\", id, JSON.stringify({\n            sdp: connections[id].localDescription\n          }));\n        }).catch(e => console.log(e));\n      });\n    }\n    stream.getTracks().forEach(track => track.onended = () => {\n      //setScreen(false)\n      setVideo(false);\n      setAudio(false);\n      try {\n        let tracks = localVideoref.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      } catch (e) {\n        console.log(e);\n      }\n      let blackSilence = (...args) => new MediaStream([black(...args), silence()]);\n      window.localStream = blackSilence();\n      localVideoref.current.srcObject = window.localStream;\n      for (let id in connections) {\n        connections[id].addStream(window.localStream);\n        connections[id].createOffer().then(description => {\n          connections[id].setLocalDescription(description).then(() => {\n            socketRef.current.emit(\"signal\", id, JSON.stringify({\n              sdp: connections[id].localDescription\n            }));\n          }).catch(e => console.log(e));\n        });\n      }\n      getUserMedia();\n    });\n  };\n  let silence = () => {\n    let ctx = new AudioContext();\n    let oscillator = ctx.createOscillator();\n    let dst = oscillator.connect(ctx.createMediaStreamDestination());\n    oscillator.start();\n    ctx.resume();\n    return Object.assign(dst.stream.getAudioTracks()[0], {\n      enabled: false\n    });\n  };\n  let black = ({\n    width = 640,\n    height = 480\n  } = {}) => {\n    let canvas = Object.assign(document.createElement(\"canvas\"), {\n      width,\n      height\n    });\n    canvas.getContext(\"2d\").fillRect(0, 0, width, height);\n    let stream = canvas.captureStream();\n    return Object.assign(stream.getVideoTracks()[0], {\n      enabled: false\n    });\n  };\n  let getUserMedia = () => {\n    if (video && videoAvailable || audio && audioAvailable) {\n      navigator.mediaDevices.getUserMedia({\n        video: video,\n        audio: audio\n      }).then(getUserMediaSuccess).then().catch(err => {\n        console.log(err);\n      });\n    } else {\n      try {\n        let tracks = localVideoref.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n  useEffect(() => {\n    if (video !== undefined && audio !== undefined) {\n      getUserMedia();\n      console.log(\"SET STATE HAS \", video, audio);\n    }\n  }, [video, audio]);\n  let gotMessageFromServer = (fromId, message) => {\n    var signal = JSON.parse(message);\n    if (fromId !== socketIdRef.current) {\n      if (signal.sdp) {\n        connections[fromId].setRemoteDescription(new RTCSessionDescription(signal.sdp)).then(() => {\n          if (signal.sdp.type === \"offer\") {\n            connections[fromId].createAnswer().then(description => {\n              connections[fromId].setLocalDescription(description).then(() => {\n                socketRef.current.emit(\"signal\", fromId, JSON.stringify({\n                  sdp: connections[fromId].localDescription\n                }));\n              }).catch(e => console.log(e));\n            }).catch(e => console.log(e));\n          }\n        }).catch(e => console.log(e));\n      }\n      if (signal.ice) {\n        connections[fromId].addIceCandidate(new RTCIceCandidate(signal.ice)).catch(e => console.log(e));\n      }\n    }\n  };\n  let addMessage = () => {};\n  // webRTC connect to\n  let connectToSocketServer = () => {\n    socketRef.current = io.connect(server_url, {\n      secure: false\n    });\n    socketRef.current.on(\"signal\", gotMessageFromServer);\n    socketRef.current.on(\"connect\", () => {\n      socketRef.current.emit(\"join-call\", window.location.href);\n      socketIdRef.current = socketRef.current.id;\n      socketRef.current.on(\"chat-message\", addMessage);\n      socketRef.current.on(\"user-left\", id => {\n        setVideos(videos => videos.filter(video => video.socketId !== id));\n      });\n      socketRef.current.on(\"user-joined\", (id, clients) => {\n        clients.forEach(socketListId => {\n          connections[socketListId] = new RTCPeerConnection(peerConfigConnections);\n          // Wait for their ice candidate\n          connections[socketListId].onicecandidate = function (event) {\n            if (event.candidate != null) {\n              socketRef.current.emit(\"signal\", socketListId, JSON.stringify({\n                ice: event.candidate\n              }));\n            }\n          };\n\n          // Wait for their video stream\n          connections[socketListId].onaddstream = event => {\n            console.log(\"BEFORE:\", videoRef.current);\n            console.log(\"FINDING ID: \", socketListId);\n            let videoExists = videoRef.current.find(video => video.socketId === socketListId);\n            if (videoExists) {\n              console.log(\"FOUND EXISTING\");\n\n              // Update the stream of the existing video\n              setVideos(videos => {\n                const updatedVideos = videos.map(video => video.socketId === socketListId ? {\n                  ...video,\n                  stream: event.stream\n                } : video);\n                videoRef.current = updatedVideos;\n                return updatedVideos;\n              });\n            } else {\n              // Create a new video\n              console.log(\"CREATING NEW\");\n              let newVideo = {\n                socketId: socketListId,\n                stream: event.stream,\n                autoplay: true,\n                playsinline: true\n              };\n              setVideos(videos => {\n                const updatedVideos = [...videos, newVideo];\n                videoRef.current = updatedVideos;\n                return updatedVideos;\n              });\n            }\n          };\n\n          // Add the local video stream\n          if (window.localStream !== undefined && window.localStream !== null) {\n            connections[socketListId].addStream(window.localStream);\n          } else {\n            // todo blacksileance\n            let blackSilence = (...args) => new MediaStream([black(...args), silence()]);\n            window.localStream = blackSilence();\n            connections[socketListId].addStream(window.localStream);\n          }\n        });\n        if (id === socketIdRef.current) {\n          for (let id2 in connections) {\n            if (id2 === socketIdRef.current) continue;\n            try {\n              connections[id2].addStream(window.localStream);\n            } catch (e) {}\n            connections[id2].createOffer().then(description => {\n              connections[id2].setLocalDescription(description).then(() => {\n                socketRef.current.emit(\"signal\", id2, JSON.stringify({\n                  sdp: connections[id2].localDescription\n                }));\n              }).catch(e => console.log(e));\n            });\n          }\n        }\n      });\n    });\n  };\n  let getMedia = () => {\n    setVideo(videoAvailable);\n    setAudio(audioAvailable);\n    connectToSocketServer();\n  };\n  let connect = () => {\n    setAskForUsername(false);\n    getMedia();\n  };\n  let handleVideo = () => {\n    setVideo(!video);\n  };\n  let handleAudio = () => {\n    setAudio(!audio);\n  };\n  let getDisplayMediaSucess = stream => {\n    try {\n      window.localStream.getTracks().forEach(track => track.stop());\n    } catch (e) {\n      console.log(e);\n    }\n    window.localStream = stream;\n    localVideoref.current.srcObject = stream;\n    for (let id in connections) {\n      if (id === socketIdRef.current) continue;\n    }\n  };\n  let getDisplayMedia = () => {\n    if (screen) {\n      if (navigator.mediaDevices.getDisplayMedia) {\n        navigator.mediaDevices.getDisplayMedia({\n          video: true,\n          audio: true\n        }).then(getDisplayMediaSucess).then(stream => {}).catch(e => console.log(e));\n      }\n    }\n  };\n  useEffect(() => {\n    if (screen !== undefined) {\n      getDisplayMedia();\n    }\n  }, [screen]);\n\n  // Screen sharing componets\n  let handleScreen = () => {\n    setScreen(!screen);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children:\n    // video and audio control user write usename and connect to meeting\n    // after we enter a username and then join code\n    // this page is decide for this direct connect\n    askForUsername === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter into Lobby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: connect,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          src: \"\",\n          ref: localVideoref,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.meetVideoContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.buttonContainer,\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleVideo,\n          style: {\n            color: \"white\"\n          },\n          children: video === true ? /*#__PURE__*/_jsxDEV(VideocamIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 35\n          }, this) : /*#__PURE__*/_jsxDEV(VideocamOffIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 54\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          style: {\n            color: \"red\"\n          },\n          children: /*#__PURE__*/_jsxDEV(CallEndIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleAudio,\n          style: {\n            color: \"white\"\n          },\n          children: audio === true ? /*#__PURE__*/_jsxDEV(MicIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 35\n          }, this) : /*#__PURE__*/_jsxDEV(MicOffIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 15\n        }, this), screenAvailable === true ? /*#__PURE__*/_jsxDEV(IconButton, {\n          style: {\n            color: \"white\"\n          },\n          children: screen === true ? /*#__PURE__*/_jsxDEV(ScreenShareIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(StopscrennshareIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Badge, {\n          badgeContent: newMessages,\n          max: 999,\n          color: \"secondary\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            style: {\n              color: \"white\"\n            },\n            children: /*#__PURE__*/_jsxDEV(ChatIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        className: styles.meetUserVideo,\n        ref: localVideoref,\n        autoPlay: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.conferenceView,\n        children: videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            \"data-socket\": video.socketId,\n            ref: ref => {\n              if (ref && video.stream) {\n                ref.srcObject = video.stream;\n              }\n            },\n            autoPlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 19\n          }, this)\n        }, video.socketId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 431,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoMeet, \"P2XR+ek5p2Ifvvgzp0HYhtp1vtw=\");\n_c = VideoMeet;\nexport default VideoMeet;\nvar _c;\n$RefreshReg$(_c, \"VideoMeet\");","map":{"version":3,"names":["React","useEffect","useRef","useState","styles","TextField","Button","io","IconButton","VideocamIcon","VideocamOffIcon","CallEndIcon","MicIcon","MicOffIcon","ScreenShareIcon","StopscrennshareIcon","Badge","ChatIcon","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","connections","peerConfigConnections","iceServers","url","VideoMeet","_s","socketRef","socketIdRef","localVideoref","videoAvailable","setVideoAvailable","audioAvailable","setAudioAvailable","video","setVideo","audio","setAudio","screen","setScreen","showModal","setModal","screenAvailable","setScreenAvailable","messages","setMessages","message","setMessage","newMessages","setNewMessages","askForUsername","setAskForUsername","username","setUsername","videoRef","videos","setVideos","getPermissions","videopermission","navigator","mediaDevices","getUserMedia","audiopermission","getDisplayMedia","userMediaStream","window","localStream","current","srcObject","err","console","log","getUserMediaSuccess","stream","getTracks","forEach","track","stop","e","id","addStream","createOffer","then","description","setLocalDescription","emit","JSON","stringify","sdp","localDescription","catch","onended","tracks","blackSilence","args","MediaStream","black","silence","ctx","AudioContext","oscillator","createOscillator","dst","connect","createMediaStreamDestination","start","resume","Object","assign","getAudioTracks","enabled","width","height","canvas","document","createElement","getContext","fillRect","captureStream","getVideoTracks","undefined","gotMessageFromServer","fromId","signal","parse","setRemoteDescription","RTCSessionDescription","type","createAnswer","ice","addIceCandidate","RTCIceCandidate","addMessage","connectToSocketServer","secure","on","location","href","filter","socketId","clients","socketListId","RTCPeerConnection","onicecandidate","event","candidate","onaddstream","videoExists","find","updatedVideos","map","newVideo","autoplay","playsinline","id2","getMedia","handleVideo","handleAudio","getDisplayMediaSucess","handleScreen","children","fileName","_jsxFileName","lineNumber","columnNumber","label","value","onChange","target","variant","onClick","src","ref","autoPlay","muted","className","meetVideoContainer","buttonContainer","style","color","badgeContent","max","meetUserVideo","conferenceView","_c","$RefreshReg$"],"sources":["C:/Users/hriti/OneDrive/Desktop/Zoom Clone/frontend/src/pages/VideoMeet.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport styles from \"../Styles/VideoComponents.module.css\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport io from \"socket.io-client\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport VideocamIcon from \"@mui/icons-material/Videocam\";\r\nimport VideocamOffIcon from \"@mui/icons-material/VideocamOff\";\r\nimport CallEndIcon from \"@mui/icons-material/CallEnd\";\r\nimport MicIcon from \"@mui/icons-material/Mic\";\r\nimport MicOffIcon from \"@mui/icons-material/MicOff\";\r\nimport ScreenShareIcon from \"@mui/icons-material/ScreenShare\";\r\nimport StopscrennshareIcon from \"@mui/icons-material/StopScreenShare\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport ChatIcon from \"@mui/icons-material/Chat\";\r\n\r\nconst server_url = \"http://localhost:8000\";\r\n\r\nvar connections = {};\r\nconst peerConfigConnections = {\r\n  iceServers: [{ url: \"stun:stun.l.google.com:19302\" }],\r\n};\r\n\r\nfunction VideoMeet() {\r\n  var socketRef = useRef();\r\n  let socketIdRef = useRef(); //jab video connect hoga to apna socket id\r\n\r\n  let localVideoref = useRef();\r\n\r\n  let [videoAvailable, setVideoAvailable] = useState(true); // permission lena video available he ya nahi\r\n\r\n  let [audioAvailable, setAudioAvailable] = useState(true);\r\n\r\n  let [video, setVideo] = useState([]); // jab ham video on / off\r\n\r\n  let [audio, setAudio] = useState(); // audio set up for on / off\r\n\r\n  let [screen, setScreen] = useState(); //\r\n\r\n  let [showModal, setModal] = useState(true); // neeche se pop up niklenga\r\n\r\n  let [screenAvailable, setScreenAvailable] = useState(); //screen share available he ki nahi\r\n\r\n  let [messages, setMessages] = useState([]); // mesaage ke state handle\r\n\r\n  let [message, setMessage] = useState(\"\");\r\n\r\n  let [newMessages, setNewMessages] = useState(3); // chat ke uppar\r\n\r\n  let [askForUsername, setAskForUsername] = useState(true);\r\n\r\n  let [username, setUsername] = useState(\"\");\r\n\r\n  const videoRef = useRef([]);\r\n\r\n  let [videos, setVideos] = useState([]);\r\n\r\n  const getPermissions = async () => {\r\n    try {\r\n      // This prompts the user for permission to access their webcam.\r\n      const videopermission = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n      });\r\n\r\n      if (videopermission) {\r\n        setVideoAvailable(true);\r\n      } else {\r\n        setVideoAvailable(false);\r\n      }\r\n      // this is for audio\r\n      const audiopermission = await navigator.mediaDevices.getUserMedia({\r\n        audio: true,\r\n      });\r\n\r\n      if (audiopermission) {\r\n        setAudioAvailable(true);\r\n      } else {\r\n        setAudioAvailable(false);\r\n      }\r\n\r\n      // screen sharing\r\n      if (navigator.mediaDevices.getDisplayMedia) {\r\n        setScreenAvailable(true);\r\n      } else {\r\n        setScreenAvailable(false);\r\n      }\r\n\r\n      // this code give you video of your on page\r\n      if (videoAvailable || audioAvailable) {\r\n        const userMediaStream = await navigator.mediaDevices.getUserMedia({\r\n          video: videoAvailable,\r\n          audio: audioAvailable,\r\n        });\r\n        if (userMediaStream) {\r\n          window.localStream = userMediaStream;\r\n          if (localVideoref.current) {\r\n            localVideoref.current.srcObject = userMediaStream;\r\n          }\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPermissions();\r\n  }, []);\r\n\r\n  // connection with web RTC\r\n  let getUserMediaSuccess = (stream) => {\r\n    console.log(\"HERE\");\r\n    try {\r\n      window.localStream.getTracks().forEach((track) => track.stop());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n    window.localStream = stream;\r\n    localVideoref.current.srcObject = stream;\r\n\r\n    for (let id in connections) {\r\n      if (id === socketIdRef.current) continue;\r\n\r\n      connections[id].addStream(window.localStream);\r\n\r\n      connections[id].createOffer().then((description) => {\r\n        connections[id]\r\n          .setLocalDescription(description)\r\n          .then(() => {\r\n            socketRef.current.emit(\r\n              \"signal\",\r\n              id,\r\n              JSON.stringify({ sdp: connections[id].localDescription })\r\n            );\r\n          })\r\n          .catch((e) => console.log(e));\r\n      });\r\n    }\r\n\r\n    stream.getTracks().forEach(\r\n      (track) =>\r\n        (track.onended = () => {\r\n          //setScreen(false)\r\n          setVideo(false);\r\n          setAudio(false);\r\n\r\n          try {\r\n            let tracks = localVideoref.current.srcObject.getTracks();\r\n            tracks.forEach((track) => track.stop());\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n\r\n          let blackSilence = (...args) =>\r\n            new MediaStream([black(...args), silence()]);\r\n          window.localStream = blackSilence();\r\n          localVideoref.current.srcObject = window.localStream;\r\n\r\n          for (let id in connections) {\r\n            connections[id].addStream(window.localStream);\r\n            connections[id].createOffer().then((description) => {\r\n              connections[id]\r\n                .setLocalDescription(description)\r\n                .then(() => {\r\n                  socketRef.current.emit(\r\n                    \"signal\",\r\n                    id,\r\n                    JSON.stringify({ sdp: connections[id].localDescription })\r\n                  );\r\n                })\r\n                .catch((e) => console.log(e));\r\n            });\r\n          }\r\n\r\n          getUserMedia();\r\n        })\r\n    );\r\n  };\r\n\r\n  let silence = () => {\r\n    let ctx = new AudioContext();\r\n    let oscillator = ctx.createOscillator();\r\n    let dst = oscillator.connect(ctx.createMediaStreamDestination());\r\n    oscillator.start();\r\n    ctx.resume();\r\n    return Object.assign(dst.stream.getAudioTracks()[0], { enabled: false });\r\n  };\r\n  let black = ({ width = 640, height = 480 } = {}) => {\r\n    let canvas = Object.assign(document.createElement(\"canvas\"), {\r\n      width,\r\n      height,\r\n    });\r\n    canvas.getContext(\"2d\").fillRect(0, 0, width, height);\r\n    let stream = canvas.captureStream();\r\n    return Object.assign(stream.getVideoTracks()[0], { enabled: false });\r\n  };\r\n  let getUserMedia = () => {\r\n    if ((video && videoAvailable) || (audio && audioAvailable)) {\r\n      navigator.mediaDevices\r\n        .getUserMedia({ video: video, audio: audio })\r\n        .then(getUserMediaSuccess)\r\n        .then()\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      try {\r\n        let tracks = localVideoref.current.srcObject.getTracks();\r\n        tracks.forEach((track) => track.stop());\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (video !== undefined && audio !== undefined) {\r\n      getUserMedia();\r\n      console.log(\"SET STATE HAS \", video, audio);\r\n    }\r\n  }, [video, audio]);\r\n\r\n  let gotMessageFromServer = (fromId, message) => {\r\n    var signal = JSON.parse(message);\r\n\r\n    if (fromId !== socketIdRef.current) {\r\n      if (signal.sdp) {\r\n        connections[fromId]\r\n          .setRemoteDescription(new RTCSessionDescription(signal.sdp))\r\n          .then(() => {\r\n            if (signal.sdp.type === \"offer\") {\r\n              connections[fromId]\r\n                .createAnswer()\r\n                .then((description) => {\r\n                  connections[fromId]\r\n                    .setLocalDescription(description)\r\n                    .then(() => {\r\n                      socketRef.current.emit(\r\n                        \"signal\",\r\n                        fromId,\r\n                        JSON.stringify({\r\n                          sdp: connections[fromId].localDescription,\r\n                        })\r\n                      );\r\n                    })\r\n                    .catch((e) => console.log(e));\r\n                })\r\n                .catch((e) => console.log(e));\r\n            }\r\n          })\r\n          .catch((e) => console.log(e));\r\n      }\r\n\r\n      if (signal.ice) {\r\n        connections[fromId]\r\n          .addIceCandidate(new RTCIceCandidate(signal.ice))\r\n          .catch((e) => console.log(e));\r\n      }\r\n    }\r\n  };\r\n  let addMessage = () => {};\r\n  // webRTC connect to\r\n  let connectToSocketServer = () => {\r\n    socketRef.current = io.connect(server_url, { secure: false });\r\n\r\n    socketRef.current.on(\"signal\", gotMessageFromServer);\r\n\r\n    socketRef.current.on(\"connect\", () => {\r\n      socketRef.current.emit(\"join-call\", window.location.href);\r\n      socketIdRef.current = socketRef.current.id;\r\n\r\n      socketRef.current.on(\"chat-message\", addMessage);\r\n\r\n      socketRef.current.on(\"user-left\", (id) => {\r\n        setVideos((videos) => videos.filter((video) => video.socketId !== id));\r\n      });\r\n\r\n      socketRef.current.on(\"user-joined\", (id, clients) => {\r\n        clients.forEach((socketListId) => {\r\n          connections[socketListId] = new RTCPeerConnection(\r\n            peerConfigConnections\r\n          );\r\n          // Wait for their ice candidate\r\n          connections[socketListId].onicecandidate = function (event) {\r\n            if (event.candidate != null) {\r\n              socketRef.current.emit(\r\n                \"signal\",\r\n                socketListId,\r\n                JSON.stringify({ ice: event.candidate })\r\n              );\r\n            }\r\n          };\r\n\r\n          // Wait for their video stream\r\n          connections[socketListId].onaddstream = (event) => {\r\n            console.log(\"BEFORE:\", videoRef.current);\r\n            console.log(\"FINDING ID: \", socketListId);\r\n\r\n            let videoExists = videoRef.current.find(\r\n              (video) => video.socketId === socketListId\r\n            );\r\n\r\n            if (videoExists) {\r\n              console.log(\"FOUND EXISTING\");\r\n\r\n              // Update the stream of the existing video\r\n              setVideos((videos) => {\r\n                const updatedVideos = videos.map((video) =>\r\n                  video.socketId === socketListId\r\n                    ? { ...video, stream: event.stream }\r\n                    : video\r\n                );\r\n                videoRef.current = updatedVideos;\r\n                return updatedVideos;\r\n              });\r\n            } else {\r\n              // Create a new video\r\n              console.log(\"CREATING NEW\");\r\n              let newVideo = {\r\n                socketId: socketListId,\r\n                stream: event.stream,\r\n                autoplay: true,\r\n                playsinline: true,\r\n              };\r\n\r\n              setVideos((videos) => {\r\n                const updatedVideos = [...videos, newVideo];\r\n                videoRef.current = updatedVideos;\r\n                return updatedVideos;\r\n              });\r\n            }\r\n          };\r\n\r\n          // Add the local video stream\r\n          if (window.localStream !== undefined && window.localStream !== null) {\r\n            connections[socketListId].addStream(window.localStream);\r\n          } else {\r\n            // todo blacksileance\r\n            let blackSilence = (...args) =>\r\n              new MediaStream([black(...args), silence()]);\r\n            window.localStream = blackSilence();\r\n            connections[socketListId].addStream(window.localStream);\r\n          }\r\n        });\r\n\r\n        if (id === socketIdRef.current) {\r\n          for (let id2 in connections) {\r\n            if (id2 === socketIdRef.current) continue;\r\n\r\n            try {\r\n              connections[id2].addStream(window.localStream);\r\n            } catch (e) {}\r\n\r\n            connections[id2].createOffer().then((description) => {\r\n              connections[id2]\r\n                .setLocalDescription(description)\r\n                .then(() => {\r\n                  socketRef.current.emit(\r\n                    \"signal\",\r\n                    id2,\r\n                    JSON.stringify({ sdp: connections[id2].localDescription })\r\n                  );\r\n                })\r\n                .catch((e) => console.log(e));\r\n            });\r\n          }\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  let getMedia = () => {\r\n    setVideo(videoAvailable);\r\n    setAudio(audioAvailable);\r\n    connectToSocketServer();\r\n  };\r\n  let connect = () => {\r\n    setAskForUsername(false);\r\n    getMedia();\r\n  };\r\n  let handleVideo = () => {\r\n    setVideo(!video);\r\n  };\r\n  let handleAudio = () => {\r\n    setAudio(!audio);\r\n  };\r\n\r\n  let getDisplayMediaSucess=(stream)=>{\r\n      try{\r\n        window.localStream.getTracks().forEach(track=>track.stop())\r\n      }\r\n      catch(e){\r\n        console.log(e);\r\n      }\r\n      window.localStream=stream;\r\n      localVideoref.current.srcObject=stream;\r\n\r\n      for(let id in connections){\r\n        if(id===socketIdRef.current) continue;\r\n        \r\n      }\r\n  }\r\n\r\n  let getDisplayMedia=()=>{\r\n    if(screen){\r\n        if(navigator.mediaDevices.getDisplayMedia){\r\n            navigator.mediaDevices.getDisplayMedia({video:true,audio:true})\r\n            .then(getDisplayMediaSucess)\r\n            .then((stream)=>{\r\n\r\n            })\r\n            .catch((e)=>console.log(e))\r\n\r\n            \r\n        }\r\n    }\r\n  } \r\n\r\n  useEffect(()=>{\r\n    if(screen!==undefined){\r\n        getDisplayMedia();\r\n    }\r\n  },[screen])\r\n\r\n  // Screen sharing componets\r\n  let handleScreen=()=>{\r\n    setScreen(!screen)\r\n  }\r\n  return (\r\n    <div>\r\n      {\r\n        // video and audio control user write usename and connect to meeting\r\n        // after we enter a username and then join code\r\n        // this page is decide for this direct connect\r\n        askForUsername === true ? (\r\n          <div>\r\n            <h2>Enter into Lobby</h2>\r\n            <TextField\r\n              id=\"outlined-basic\"\r\n              label=\"username\"\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n            ></TextField>\r\n            <Button variant=\"contained\" onClick={connect}>\r\n              Connect\r\n            </Button>\r\n\r\n            {/* // video code is here bro */}\r\n            <div>\r\n              <video src=\"\" ref={localVideoref} autoPlay muted></video>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className={styles.meetVideoContainer}>\r\n            <div className={styles.buttonContainer}>\r\n              {/* Video Button */}\r\n              <IconButton onClick={handleVideo} style={{ color: \"white\" }}>\r\n                {video === true ? <VideocamIcon /> : <VideocamOffIcon />}\r\n              </IconButton>\r\n              <IconButton style={{ color: \"red\" }}>\r\n                <CallEndIcon />\r\n              </IconButton>\r\n              <IconButton onClick={handleAudio} style={{ color: \"white\" }}>\r\n                {audio === true ? <MicIcon /> : <MicOffIcon />}\r\n              </IconButton>\r\n              {screenAvailable === true ? (\r\n                <IconButton style={{ color: \"white\" }}>\r\n                  {screen === true ? (\r\n                    <ScreenShareIcon />\r\n                  ) : (\r\n                    <StopscrennshareIcon />\r\n                  )}\r\n                </IconButton>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Badge badgeContent={newMessages} max={999} color=\"secondary\">\r\n                <IconButton style={{ color: \"white\" }}>\r\n                  <ChatIcon />\r\n                </IconButton>\r\n              </Badge>\r\n            </div>\r\n            <video\r\n              className={styles.meetUserVideo}\r\n              ref={localVideoref}\r\n              autoPlay\r\n              muted\r\n            ></video>\r\n            <div className={styles.conferenceView}>\r\n              {videos.map((video) => (\r\n                <div key={video.socketId}>\r\n                  <video\r\n                    data-socket={video.socketId}\r\n                    ref={(ref) => {\r\n                      if (ref && video.stream) {\r\n                        ref.srcObject = video.stream;\r\n                      }\r\n                    }}\r\n                    autoPlay\r\n                  ></video>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VideoMeet;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}