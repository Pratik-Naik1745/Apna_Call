{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hriti\\\\OneDrive\\\\Desktop\\\\Zoom Clone\\\\frontend\\\\src\\\\pages\\\\VideoMeet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport \"../Styles/VideoComponents.css\";\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = \"http://localhost:8000\";\nvar connections = {};\nconst peerConfigConnections = {\n  \"iceServers\": [{\n    \"url\": \"stun:stun.l.google.com:19302\"\n  }]\n};\nfunction VideoMeet() {\n  _s();\n  var socketRef = useRef();\n  let socketIdRef = useRef(); //jab video connect hoga to apna socket id\n\n  let localVideoref = useRef();\n  let [videoAvailable, setVideoAvailable] = useState(true); // permission lena video available he ya nahi\n\n  let [audioAvailable, setAudioAvailable] = useState(true);\n  let [video, setVideo] = useState([]); // jab ham video on / off \n\n  let [audio, setAudio] = useState(); // audio set up for on / off\n\n  let [screen, setScreen] = useState(); // \n\n  let [showModal, setModal] = useState(true); // neeche se pop up niklenga\n\n  let [screenAvailable, setScreenAvailable] = useState(); //screen share available he ki nahi\n\n  let [messages, setMessages] = useState([]); // mesaage ke state handle \n\n  let [message, setMessage] = useState(\"\");\n  let [newMessages, setNewMessages] = useState(0);\n  let [askForUsername, setAskForUsername] = useState(true);\n  let [username, setUsername] = useState(\"\");\n  const videoRef = useRef([]);\n  let [videos, setVideos] = useState([]);\n  const getPermissions = async () => {\n    try {\n      // This prompts the user for permission to access their webcam.\n      const videopermission = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      if (videopermission) {\n        setVideoAvailable(true);\n      } else {\n        setVideoAvailable(false);\n      }\n      // this is for audio \n      const audiopermission = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      if (audiopermission) {\n        setAudioAvailable(true);\n      } else {\n        setAudioAvailable(false);\n      }\n\n      // screen sharing\n      if (navigator.mediaDevices.getDisplayMedia) {\n        setScreenAvailable(true);\n      } else {\n        setScreenAvailable(false);\n      }\n\n      // this code give you video of your on page\n      if (videoAvailable || audioAvailable) {\n        const userMediaStream = await navigator.mediaDevices.getUserMedia({\n          video: videoAvailable,\n          audio: audioAvailable\n        });\n        if (userMediaStream) {\n          window.localStream = userMediaStream;\n          if (localVideoref.current) {\n            localVideoref.current.srcObject = userMediaStream;\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    getPermissions();\n  }, []);\n  let getUserMediaSuccess = stream => {\n    console.log(\"HERE\");\n    try {\n      window.localStream.getTracks().forEach(track => track.stop());\n    } catch (e) {\n      console.log(e);\n    }\n    window.localStream = stream;\n    localVideoref.current.srcObject = stream;\n    for (let id in connections) {\n      if (id === socketIdRef.current) continue;\n      connections[id].addStream(window.localStream);\n      connections[id].createOffer().then(description => {\n        connections[id].setLocalDescription(description).then(() => {\n          socketRef.current.emit('signal', id, JSON.stringify({\n            'sdp': connections[id].localDescription\n          }));\n        }).catch(e => console.log(e));\n      });\n    }\n    stream.getTracks().forEach(track => track.onended = () => {\n      setScreen(false);\n      try {\n        let tracks = localVideoref.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      } catch (e) {\n        console.log(e);\n      }\n\n      // let blackSilence = (...args) => new MediaStream([black(...args), silence()])\n      // window.localStream = blackSilence()\n      // localVideoref.current.srcObject = window.localStream\n\n      for (let id in connections) {\n        connections[id].addStream(window.localStream);\n        connect;\n      }\n      getUserMedia();\n    });\n  };\n  let getUserMedia = () => {\n    if (video && videoAvailable || audio && audioAvailable) {\n      navigator.mediaDevices.getUserMedia({\n        video: video,\n        audio: audio\n      }).then(getUserMediaSuccess).then().catch(err => {\n        console.log(err);\n      });\n    } else {\n      try {\n        let tracks = localVideoref.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n  useEffect(() => {\n    if (video !== undefined && audio !== undefined) {\n      getUserMedia();\n      console.log(\"SET STATE HAS \", video, audio);\n    }\n  }, [video, audio]);\n  let gotMessageFromServer = (fromId, message) => {\n    var signal = JSON.parse(message);\n    if (fromId !== socketIdRef.current) {\n      if (signal.sdp) {\n        connections[fromId].setRemoteDescription(new RTCSessionDescription(signal.sdp)).then(() => {\n          if (signal.sdp.type === 'offer') {\n            connections[fromId].createAnswer().then(description => {\n              connections[fromId].setLocalDescription(description).then(() => {\n                socketRef.current.emit('signal', fromId, JSON.stringify({\n                  'sdp': connections[fromId].localDescription\n                }));\n              }).catch(e => console.log(e));\n            }).catch(e => console.log(e));\n          }\n        }).catch(e => console.log(e));\n      }\n      if (signal.ice) {\n        connections[fromId].addIceCandidate(new RTCIceCandidate(signal.ice)).catch(e => console.log(e));\n      }\n    }\n  };\n  let addMessage = () => {};\n  // webRTC connect to \n  let connectToSocketServer = () => {\n    socketRef.current = io.connect(server_url, {\n      secure: false\n    });\n    socketRef.current.on('signal', gotMessageFromServer);\n    socketRef.current.on('connect', () => {\n      socketRef.current.emit('join-call', window.location.href);\n      socketIdRef.current = socketRef.current.id;\n      socketRef.current.on('chat-message', addMessage);\n      socketRef.current.on('user-left', id => {\n        setVideos(videos => videos.filter(video => video.socketId !== id));\n      });\n      socketRef.current.on('user-joined', (id, clients) => {\n        clients.forEach(socketListId => {\n          connections[socketListId] = new RTCPeerConnection(peerConfigConnections);\n          // Wait for their ice candidate       \n          connections[socketListId].onicecandidate = function (event) {\n            if (event.candidate != null) {\n              socketRef.current.emit('signal', socketListId, JSON.stringify({\n                'ice': event.candidate\n              }));\n            }\n          };\n\n          // Wait for their video stream\n          connections[socketListId].onaddstream = event => {\n            console.log(\"BEFORE:\", videoRef.current);\n            console.log(\"FINDING ID: \", socketListId);\n            let videoExists = videoRef.current.find(video => video.socketId === socketListId);\n            if (videoExists) {\n              console.log(\"FOUND EXISTING\");\n\n              // Update the stream of the existing video\n              setVideos(videos => {\n                const updatedVideos = videos.map(video => video.socketId === socketListId ? {\n                  ...video,\n                  stream: event.stream\n                } : video);\n                videoRef.current = updatedVideos;\n                return updatedVideos;\n              });\n            } else {\n              // Create a new video\n              console.log(\"CREATING NEW\");\n              let newVideo = {\n                socketId: socketListId,\n                stream: event.stream,\n                autoplay: true,\n                playsinline: true\n              };\n              setVideos(videos => {\n                const updatedVideos = [...videos, newVideo];\n                videoRef.current = updatedVideos;\n                return updatedVideos;\n              });\n            }\n          };\n\n          // Add the local video stream\n          if (window.localStream !== undefined && window.localStream !== null) {\n            connections[socketListId].addStream(window.localStream);\n          } else {}\n        });\n        if (id === socketIdRef.current) {\n          for (let id2 in connections) {\n            if (id2 === socketIdRef.current) continue;\n            try {\n              connections[id2].addStream(window.localStream);\n            } catch (e) {}\n            connections[id2].createOffer().then(description => {\n              connections[id2].setLocalDescription(description).then(() => {\n                socketRef.current.emit('signal', id2, JSON.stringify({\n                  'sdp': connections[id2].localDescription\n                }));\n              }).catch(e => console.log(e));\n            });\n          }\n        }\n      });\n    });\n  };\n  let getMedia = () => {\n    setVideo(videoAvailable);\n    setAudio(audioAvailable);\n    connectToSocketServer();\n  };\n  let connect = () => {\n    setAskForUsername(false);\n    getMedia();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children:\n    // video and audio control user write usename and connect to meeting\n    // after we enter a username and then join code\n    // this page is decide for this direct connect\n    askForUsername === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter into Lobby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"username\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: connect,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          src: \"\",\n          ref: localVideoref,\n          autoPlay: true,\n          muted: true,\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this);\n}\n_s(VideoMeet, \"k501hHsYRdD4xIst+gu4+PUW6zo=\");\n_c = VideoMeet;\nexport default VideoMeet;\nvar _c;\n$RefreshReg$(_c, \"VideoMeet\");","map":{"version":3,"names":["React","useEffect","useRef","useState","TextField","Button","io","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","connections","peerConfigConnections","VideoMeet","_s","socketRef","socketIdRef","localVideoref","videoAvailable","setVideoAvailable","audioAvailable","setAudioAvailable","video","setVideo","audio","setAudio","screen","setScreen","showModal","setModal","screenAvailable","setScreenAvailable","messages","setMessages","message","setMessage","newMessages","setNewMessages","askForUsername","setAskForUsername","username","setUsername","videoRef","videos","setVideos","getPermissions","videopermission","navigator","mediaDevices","getUserMedia","audiopermission","getDisplayMedia","userMediaStream","window","localStream","current","srcObject","err","console","log","getUserMediaSuccess","stream","getTracks","forEach","track","stop","e","id","addStream","createOffer","then","description","setLocalDescription","emit","JSON","stringify","localDescription","catch","onended","tracks","connect","undefined","gotMessageFromServer","fromId","signal","parse","sdp","setRemoteDescription","RTCSessionDescription","type","createAnswer","ice","addIceCandidate","RTCIceCandidate","addMessage","connectToSocketServer","secure","on","location","href","filter","socketId","clients","socketListId","RTCPeerConnection","onicecandidate","event","candidate","onaddstream","videoExists","find","updatedVideos","map","newVideo","autoplay","playsinline","id2","getMedia","children","fileName","_jsxFileName","lineNumber","columnNumber","label","value","onChange","target","variant","onClick","src","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["C:/Users/hriti/OneDrive/Desktop/Zoom Clone/frontend/src/pages/VideoMeet.jsx"],"sourcesContent":["import React,{useEffect, useRef,useState} from 'react'\r\nimport \"../Styles/VideoComponents.css\"\r\nimport TextField from '@mui/material/TextField'\r\nimport Button from '@mui/material/Button';\r\nimport io from \"socket.io-client\";\r\n\r\n\r\n\r\n\r\nconst server_url=\"http://localhost:8000\"\r\n\r\nvar connections={}\r\nconst peerConfigConnections={\r\n    \"iceServers\":[\r\n        {\"url\":\"stun:stun.l.google.com:19302\"}\r\n    ]\r\n}\r\n\r\nfunction VideoMeet() {\r\n    var socketRef = useRef();\r\n    let socketIdRef = useRef(); //jab video connect hoga to apna socket id\r\n\r\n    let localVideoref = useRef();\r\n\r\n    let [videoAvailable, setVideoAvailable] = useState(true); // permission lena video available he ya nahi\r\n\r\n    let [audioAvailable, setAudioAvailable] = useState(true); \r\n\r\n    let [video, setVideo] = useState([]); // jab ham video on / off \r\n\r\n    let [audio, setAudio] = useState();  // audio set up for on / off\r\n\r\n    let [screen, setScreen] = useState(); // \r\n\r\n    \r\n    let [showModal, setModal] = useState(true); // neeche se pop up niklenga\r\n\r\n    let [screenAvailable, setScreenAvailable] = useState(); //screen share available he ki nahi\r\n\r\n    let [messages, setMessages] = useState([])  // mesaage ke state handle \r\n\r\n    let [message, setMessage] = useState(\"\"); \r\n\r\n    let [newMessages, setNewMessages] = useState(0); \r\n\r\n    let [askForUsername, setAskForUsername] = useState(true); \r\n\r\n    let [username, setUsername] = useState(\"\");\r\n\r\n    const videoRef = useRef([])\r\n\r\n    let [videos, setVideos] = useState([])\r\n\r\n    const getPermissions=async ()=>{\r\n        try{\r\n        // This prompts the user for permission to access their webcam.\r\n        const videopermission=await navigator.mediaDevices.getUserMedia({video:true});\r\n\r\n        if(videopermission){\r\n            setVideoAvailable(true);\r\n        }\r\n        else{\r\n            setVideoAvailable(false);\r\n        }\r\n        // this is for audio \r\n         const audiopermission=await navigator.mediaDevices.getUserMedia({audio:true});\r\n\r\n        if(audiopermission){\r\n            setAudioAvailable(true);\r\n        }\r\n        else{\r\n            setAudioAvailable(false);\r\n        }\r\n        \r\n        // screen sharing\r\n        if(navigator.mediaDevices.getDisplayMedia){\r\n            setScreenAvailable(true)\r\n        }else{\r\n            setScreenAvailable(false)\r\n        }\r\n        \r\n        // this code give you video of your on page\r\n        if(videoAvailable || audioAvailable){\r\n            const userMediaStream=await navigator.mediaDevices.getUserMedia({video:videoAvailable,audio:audioAvailable})\r\n            if(userMediaStream){\r\n                window.localStream=userMediaStream;\r\n                if(localVideoref.current){\r\n                    localVideoref.current.srcObject=userMediaStream;\r\n                }\r\n            }\r\n        }\r\n        }\r\n        catch(err){\r\n         console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getPermissions();\r\n    },[])\r\n\r\n    let getUserMediaSuccess=(stream)=>{\r\n         console.log(\"HERE\")\r\n        try {\r\n            window.localStream.getTracks().forEach(track => track.stop())\r\n        } catch (e) { console.log(e) }\r\n\r\n        window.localStream = stream\r\n        localVideoref.current.srcObject = stream\r\n\r\n        for (let id in connections) {\r\n            if (id === socketIdRef.current) continue\r\n\r\n            connections[id].addStream(window.localStream)\r\n\r\n            connections[id].createOffer().then((description) => {\r\n                connections[id].setLocalDescription(description)\r\n                    .then(() => {\r\n                        socketRef.current.emit('signal', id, JSON.stringify({ 'sdp': connections[id].localDescription }))\r\n                    })\r\n                    .catch(e => console.log(e))\r\n            })\r\n        }\r\n\r\n        stream.getTracks().forEach(track => track.onended = () => {\r\n            setScreen(false)\r\n\r\n            try {\r\n                let tracks = localVideoref.current.srcObject.getTracks()\r\n                tracks.forEach(track => track.stop())\r\n            } catch (e) { console.log(e) }\r\n\r\n            // let blackSilence = (...args) => new MediaStream([black(...args), silence()])\r\n            // window.localStream = blackSilence()\r\n            // localVideoref.current.srcObject = window.localStream\r\n\r\n            for(let id in connections){\r\n                connections[id].addStream(window.localStream)\r\n                connect\r\n            }\r\n\r\n            getUserMedia()\r\n\r\n        })\r\n    }\r\n\r\n    let getUserMedia=()=>{\r\n        if((video  && videoAvailable) || (audio && audioAvailable )){\r\n            navigator.mediaDevices.getUserMedia({video:video,audio:audio})\r\n            .then(getUserMediaSuccess)\r\n            .then()\r\n            .catch((err)=>{\r\n                console.log(err);\r\n            })\r\n            \r\n        }\r\n        else{\r\n            try{\r\n              let tracks=localVideoref.current.srcObject.getTracks();\r\n              tracks.forEach(track=>track.stop()) \r\n            }\r\n            catch(err){\r\n                console.log(err)\r\n            }\r\n        }\r\n    }\r\n   \r\n      useEffect(() => {\r\n        if (video !== undefined && audio !== undefined) {\r\n            getUserMedia();\r\n            console.log(\"SET STATE HAS \", video, audio);\r\n\r\n        }\r\n\r\n\r\n    }, [video, audio])\r\n\r\n    let gotMessageFromServer=(fromId,message)=>{\r\n        var signal = JSON.parse(message)\r\n\r\n        if (fromId !== socketIdRef.current) {\r\n            if (signal.sdp) {\r\n                connections[fromId].setRemoteDescription(new RTCSessionDescription(signal.sdp)).then(() => {\r\n                    if (signal.sdp.type === 'offer') {\r\n                        connections[fromId].createAnswer().then((description) => {\r\n                            connections[fromId].setLocalDescription(description).then(() => {\r\n                                socketRef.current.emit('signal', fromId, JSON.stringify({ 'sdp': connections[fromId].localDescription }))\r\n                            }).catch(e => console.log(e))\r\n                        }).catch(e => console.log(e))\r\n                    }\r\n                }).catch(e => console.log(e))\r\n            }\r\n\r\n            if (signal.ice) {\r\n                connections[fromId].addIceCandidate(new RTCIceCandidate(signal.ice)).catch(e => console.log(e))\r\n            }\r\n        }\r\n\r\n    } \r\n    let addMessage=()=>{\r\n\r\n    }\r\n    // webRTC connect to \r\n    let connectToSocketServer = () => {\r\n        socketRef.current = io.connect(server_url, { secure: false })\r\n\r\n        socketRef.current.on('signal', gotMessageFromServer);\r\n\r\n        socketRef.current.on('connect', () => {\r\n            socketRef.current.emit('join-call', window.location.href)\r\n            socketIdRef.current = socketRef.current.id\r\n\r\n            socketRef.current.on('chat-message', addMessage)\r\n\r\n            socketRef.current.on('user-left', (id) => {\r\n                setVideos((videos) => videos.filter((video) => video.socketId !== id))\r\n            })\r\n\r\n            socketRef.current.on('user-joined', (id, clients) => {\r\n                clients.forEach((socketListId) => {\r\n\r\n                    connections[socketListId] = new RTCPeerConnection(peerConfigConnections)\r\n                    // Wait for their ice candidate       \r\n                    connections[socketListId].onicecandidate = function (event) {\r\n                        if (event.candidate != null) {\r\n                            socketRef.current.emit('signal', socketListId, JSON.stringify({ 'ice': event.candidate }))\r\n                        }\r\n                    }\r\n\r\n                    // Wait for their video stream\r\n                    connections[socketListId].onaddstream = (event) => {\r\n                        console.log(\"BEFORE:\", videoRef.current);\r\n                        console.log(\"FINDING ID: \", socketListId);\r\n\r\n                        let videoExists = videoRef.current.find(video => video.socketId === socketListId);\r\n\r\n                        if (videoExists) {\r\n                            console.log(\"FOUND EXISTING\");\r\n\r\n                            // Update the stream of the existing video\r\n                            setVideos(videos => {\r\n                                const updatedVideos = videos.map(video =>\r\n                                    video.socketId === socketListId ? { ...video, stream: event.stream } : video\r\n                                );\r\n                                videoRef.current = updatedVideos;\r\n                                return updatedVideos;\r\n                            });\r\n                        } else {\r\n                            // Create a new video\r\n                            console.log(\"CREATING NEW\");\r\n                            let newVideo = {\r\n                                socketId: socketListId,\r\n                                stream: event.stream,\r\n                                autoplay: true,\r\n                                playsinline: true\r\n                            };\r\n\r\n                            setVideos(videos => {\r\n                                const updatedVideos = [...videos, newVideo];\r\n                                videoRef.current = updatedVideos;\r\n                                return updatedVideos;\r\n                            });\r\n                        }\r\n                    };\r\n\r\n\r\n                    // Add the local video stream\r\n                    if (window.localStream !== undefined && window.localStream !== null) {\r\n                        connections[socketListId].addStream(window.localStream)\r\n                    } else {\r\n                        \r\n                    }\r\n                })\r\n\r\n                if (id === socketIdRef.current) {\r\n                    for (let id2 in connections) {\r\n                        if (id2 === socketIdRef.current) continue\r\n\r\n                        try {\r\n                            connections[id2].addStream(window.localStream)\r\n                        } catch (e) { }\r\n\r\n                        connections[id2].createOffer().then((description) => {\r\n                            connections[id2].setLocalDescription(description)\r\n                                .then(() => {\r\n                                    socketRef.current.emit('signal', id2, JSON.stringify({ 'sdp': connections[id2].localDescription }))\r\n                                })\r\n                                .catch(e => console.log(e))\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n     let getMedia = () => {\r\n        setVideo(videoAvailable);\r\n        setAudio(audioAvailable);\r\n        connectToSocketServer();\r\n    }\r\n    let connect=()=>{\r\n        setAskForUsername(false);\r\n        getMedia();\r\n    }\r\n  return (\r\n    <div>\r\n      {\r\n        // video and audio control user write usename and connect to meeting\r\n        // after we enter a username and then join code\r\n        // this page is decide for this direct connect\r\n        askForUsername===true ?\r\n        <div>\r\n            \r\n            <h2>Enter into Lobby</h2>\r\n            <TextField id=\"outlined-basic\" label=\"username\" value={username} onChange={e=>setUsername(e.target.value)}></TextField>\r\n            <Button variant=\"contained\" onClick={connect}>Connect</Button>\r\n\r\n            {/* // video code is here bro */}\r\n            <div>\r\n            <video src=\"\" ref={localVideoref} autoPlay muted> </video>\r\n            </div>\r\n\r\n\r\n\r\n        </div> : <></>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoMeet\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}